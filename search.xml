<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CTF Android逆向入门浅谈（二）</title>
      <link href="/CTF%20Android%E9%80%86%E5%90%91%E5%85%A5%E9%97%A8%E6%B5%85%E8%B0%88%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/CTF%20Android%E9%80%86%E5%90%91%E5%85%A5%E9%97%A8%E6%B5%85%E8%B0%88%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<blockquote><h4 id="笔者默认读者有一定的逆向能力及面向对象编程能力，将不对部分专业词汇进行解释"><a href="#笔者默认读者有一定的逆向能力及面向对象编程能力，将不对部分专业词汇进行解释" class="headerlink" title="笔者默认读者有一定的逆向能力及面向对象编程能力，将不对部分专业词汇进行解释"></a><em>笔者默认读者有一定的</em><em><strong>逆向能力</strong></em><em>及</em><em><strong>面向对象编程能力</strong></em>，<em>将不对部分专业词汇进行解释</em></h4><h4 id="本文适合没有Android开发经验的CTF逆向初学者阅读"><a href="#本文适合没有Android开发经验的CTF逆向初学者阅读" class="headerlink" title="本文适合没有Android开发经验的CTF逆向初学者阅读"></a><em>本文适合</em><em><strong>没有Android开发经验</strong></em><em>的CTF逆向初学者阅读</em></h4></blockquote><p>上次聊了聊安卓与Apk，这次我们就来着手下逆向。</p><p>Android逆向大致分为<code>Java层</code>和<code>Native层</code>两层，我们先来说说Java层</p><h2 id="一-工具"><a href="#一-工具" class="headerlink" title="一. 工具"></a>一. 工具</h2><p>工欲善其事，必先利其器。</p><p>有多种工具可以反编译<code>Dex文件</code>，但我更推荐<code>jeb</code></p><p>需要注意的是，jeb需要<code>java环境</code>。使用前请确保环境完备</p><p>无论是<code>Kotlin</code>还是<code>Java</code>，市面上的工具都会将其反编译为<code>Java</code>，放心使用即可</p><hr><p>使用jeb和使用IDA很像：<code>拖入apk文件，jeb会自动读取并反编译为smali代码</code></p><p>你可以在右侧的<code>bytecode层级树</code>中切换你想查看的类，并使用<code>tab键</code>查看java代码</p><p><img src="./bytecode_tree.png" alt="BytecodeTree"></p><p>左上方的<code>工程浏览器</code>则是整个<code>apk文件的架构</code>，你可以查看<code>Manifest，签名详情，apk资源等</code></p><p>当然，jeb的功能十分强大，随着学习的深入，你还会了解并使用到更多功能</p><p>如果你找不到jeb，或者无法配置环境，也可以选择<code>JADX-GUI</code>，同样是一款dex的反编译工具，功能没那么强大就是了</p><hr><h2 id="二-开始逆向"><a href="#二-开始逆向" class="headerlink" title="二. 开始逆向"></a>二. 开始逆向</h2><p>在开始逆向前，我推荐<code>下载apk并安装</code>到手机上。如果你恰好是ios用户……请选择虚拟机</p><p>在Bytecode层级树中找到<code>MainActivity</code>，我们的逆向就此开始</p><p>……什么？不知道怎么找，好吧，这确实是个问题</p><p>把上面的图片拉下来，我们再来看看</p><hr><p><img src="./bytecode_tree.png" alt="BytecodeTree2"></p><p>在这个层级树中，<code>android、androidx</code>都是开发者使用的<code>安卓库</code>，不可或缺</p><p><code>com.google.material</code>是<code>material库</code>，google为开发者提供了这个库，以便更方便的实现<code>Material Design</code>（mdyyds！）</p><p>kotlin则说明开发者<code>使用了kt进行编写</code>，kt的反编译结果和java不太一样，但<code>区别不大</code></p><p>那么如何找到我们的逆向起点MainActivity呢？这时<code>manifest文件</code>就起到了作用，在工程浏览器上打开manifest文件，如图</p><p><img src="./manifest.png" alt="Manifest"></p><p><code>package=&quot;&quot;</code>是当前apk的包名</p><p>下方的<code>MainActivity</code>带有<code>MAIN</code>和<code>LAUNCHER</code>标签，说明该Activity是这个apk的<code>主活动</code>和<code>启动界面</code>，也就是从手机桌面上<code>打开软件时</code>启动的那个<code>界面</code></p><p>注意，不一定所有带有MAIN和LAUNCHER的Activity都叫MainActivity，我完全可以起<code>其他名字</code>，所以<code>先看manifest</code>往往是正确的选择</p><p>这个方法适用于大部分apk，你可以拿出一道ctf题目试一试</p><hr><h2 id="三-Activity"><a href="#三-Activity" class="headerlink" title="三. Activity"></a>三. Activity</h2><p>想了想，还是写了个简单的Demo，可以<a href="./app-release.apk">点击下载</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Android Reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开张！</title>
      <link href="/helloworld/"/>
      <url>/helloworld/</url>
      
        <content type="html"><![CDATA[<h3 id="之前的旧域名过期了，服务器后台密码什么的也被我忘了orz"><a href="#之前的旧域名过期了，服务器后台密码什么的也被我忘了orz" class="headerlink" title="之前的旧域名过期了，服务器后台密码什么的也被我忘了orz"></a>之前的旧域名过期了，服务器后台密码什么的也被我忘了orz</h3><h3 id="总之……WordPress博客上的东西懒得拿出来了，反正也没什么干货"><a href="#总之……WordPress博客上的东西懒得拿出来了，反正也没什么干货" class="headerlink" title="总之……WordPress博客上的东西懒得拿出来了，反正也没什么干货"></a>总之……WordPress博客上的东西懒得拿出来了，反正也没什么干货</h3><h3 id="以后就在这里多写点东西吧（咕咕咕"><a href="#以后就在这里多写点东西吧（咕咕咕" class="headerlink" title="以后就在这里多写点东西吧（咕咕咕"></a>以后就在这里多写点东西吧（咕咕咕</h3><h3 id="Github-Page真方便啊，我单推Github-Page（错乱"><a href="#Github-Page真方便啊，我单推Github-Page（错乱" class="headerlink" title="Github Page真方便啊，我单推Github Page（错乱"></a>Github Page真方便啊，我单推Github Page（错乱</h3><h3 id="总之就……Hello-World！"><a href="#总之就……Hello-World！" class="headerlink" title="总之就……Hello World！"></a>总之就……Hello World！</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CTF Android逆向入门浅谈（一）</title>
      <link href="/CTF%20Android%E9%80%86%E5%90%91%E5%85%A5%E9%97%A8%E6%B5%85%E8%B0%88%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/CTF%20Android%E9%80%86%E5%90%91%E5%85%A5%E9%97%A8%E6%B5%85%E8%B0%88%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<blockquote><h4 id="笔者默认读者有一定的逆向能力及面向对象编程能力，将不对部分专业词汇进行解释"><a href="#笔者默认读者有一定的逆向能力及面向对象编程能力，将不对部分专业词汇进行解释" class="headerlink" title="笔者默认读者有一定的逆向能力及面向对象编程能力，将不对部分专业词汇进行解释"></a><em>笔者默认读者有一定的</em><em><strong>逆向能力</strong></em><em>及</em><em><strong>面向对象编程能力</strong></em>，<em>将不对部分专业词汇进行解释</em></h4><h4 id="本文适合没有Android开发经验的CTF逆向初学者阅读"><a href="#本文适合没有Android开发经验的CTF逆向初学者阅读" class="headerlink" title="本文适合没有Android开发经验的CTF逆向初学者阅读"></a><em>本文适合</em><em><strong>没有Android开发经验</strong></em><em>的CTF逆向初学者阅读</em></h4></blockquote><p>对于CTF初学者而言，入门Android逆向必定是十分痛苦的一个过程：</p><ul><li>如何打开Apk文件？Apk是二进制文件吗？</li><li>Android系统是怎么运行Apk文件的？和Windows PE文件差不多吗？</li><li>Android的主流开发语言是Java或Kotlin，但我只学了C，看不懂代码怎么办？</li><li>Apk除了使用Jvm语言开发外，还有其他语言可供开发吗？</li></ul><p>时至今日，Android等移动操作系统都采用<code>应用导向模式</code>，这对用户而言十分友好，但对于入门者而言稍显硬核</p><p>笔者希望通过本文，帮助初学者了解Android和Android逆向，更愉快的面对CTF题目</p><p>如果想深入学习安卓逆向，还是推荐学习一下<code>Android开发知识</code>，能对逆向学习起到很大的帮助</p><p>那么，我们先从了解安卓开始吧</p><h2 id="一-认识Android"><a href="#一-认识Android" class="headerlink" title="一. 认识Android"></a>一. 认识Android</h2><p><code>Android</code>是一种基于<code>Linux 内核</code>和其他开源软件的修改版本的移动操作系统，由一个被称为开放手机联盟的开发者联盟开发，并由Google 提供商业赞助。</p><p>作为免费的开源软件，其源代码被称为 <a href="https://source.android.com/">Android 开源项目 (AOSP)</a>，主要根据Apache 许可证获得许可。</p><p>除了Apple公司，几乎所有主流手机厂商都在使用定制后的Android系统，如<code>MIUI</code>，<code>ColorOS</code>，<code>HarmonyOS</code>等</p><p>安卓系统架构如下，简洁明了。当然，如果你没有操作系统相关的知识，这些内容还不急着理解</p><p><img src="./android_stack_480.png" alt="AndroidStack"></p><h2 id="二-认识Apk"><a href="#二-认识Apk" class="headerlink" title="二. 认识Apk"></a>二. 认识Apk</h2><p><code>Apk</code>（<code>Android Package</code>）是安卓的软件包，它不是可执行的二进制文件，而是压缩包</p><p>将<code>apk</code>后缀改为<code>zip</code>后缀并解压，我们就能看到apk的文件结构</p><p><img src="./normal6_filetree.png" alt="Normal6"></p><p>我解压了一道入门题目作为演示，结构较少，如下：</p><ul><li><code>lib</code> : 储存.so文件，即动态链接库</li><li><code>META-INF</code> : 签名校验相关文件</li><li><code>res</code> : resource，资源文件</li><li><code>manifest</code> : 应用清单，包含应用的部分信息</li><li><code>dex</code> : 类文件，我们使用工具反编译apk时，反编译的其实就是dex文件</li></ul><p><code>先来说说manifest：</code> 它是一个应用的大清单：包名，四大组件的声明，申请的权限等等信息都在此给出</p><p>Android系统会根据manifest中的声明进行对应的处理，例如<code>在安装应用时告诉你应用所需的权限</code></p><p><code>接下来是dex文件：</code> dex文件是可执行的二进制文件，也是大多是Android应用的关键</p><p>开发者使用Java/Kotlin开发安卓应用，并使用编译器编译为Java Bytecode、Dalvik Bytecode</p><p>编译完成后获得的Dalvik Bytecode可以运行在ART（Android Runtime，一种修改后的jvm虚拟机）上</p><p>使用反编译器解析Dalvik字节码，获得的代码称作Smali，两者关系类似机器码与汇编</p><p>Smali可以进一步生成Java代码，Jvm系语言反编译后生成的Java代码可读性很强，但坏消息是没学过OOP编程的人可能感到难以理解</p><p><code>然后是lib文件夹</code>，这里储存了一些so文件</p><p>上文我们提到过，Android应用是否可以使用其它语言开发？答案是可以的，这其中最常用的就是C++</p><p>对windows熟悉的读者可能知道dll，so与dll类似，是Linux的动态链接库</p><p>一般情况下，lib后的一串字符代表cpu架构，比如x86_64，armv8等</p><p>如果不是cpu架构……那你自己google吧</p><p><code>res文件夹也比较重要</code>，这里存放了软件使用的所有资源，如：图片，音频，字符串，应用界面布局等</p><p><code>最后是META-INF文件夹</code>，这里存放着apk签名校验的相关文件</p><p>apk虽然是压缩包，但也不是普通的压缩包，需要<code>签名</code>后才能正常安装使用</p><p>META-INF保存了签名信息，以供系统读取，系统校验签名无误后才可以正常安装</p><h2 id="三-总结"><a href="#三-总结" class="headerlink" title="三. 总结"></a>三. 总结</h2><p>本文讲了讲Android与Apk的相关内容，很多逆向相关的内容还没有补充</p><p>下一篇再说啦（咕咕咕咕咕咕</p>]]></content>
      
      
      
        <tags>
            
            <tag> Android Reverse </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
